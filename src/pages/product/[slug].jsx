import React, { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import mongoose from "mongoose";
import pin from "../../../models/pin";
import { useRouter } from "next/router";
import product from "../../../models/product";
import { BsFillCartPlusFill, BsFillCheckCircleFill } from "react-icons/bs";
import Head from "next/head";

const post = ({ buynow, addtocart, prod, variants, pinj }) => {
  const router = useRouter();
  const { slug } = router.query;
  const [pinss, setpin] = useState("");
  const [service, setservice] = useState("");
  const [color, setcolor] = useState(prod.color);
  const [size, setsize] = useState(prod.size);
  const  m = `LOCOCART - ${slug.toString()}`
  useEffect(() => {
    setcolor(prod.color);
    setsize(prod.size);
  }, [router.query]);

  const refreshvariant = (newcolor, newsize) => {
    let url = `${process.env.VERCEL_URL || "http://localhost:3000"}/product/${
      variants[newcolor][newsize]["slug"]
    }`;
    router.push(url);
  };
  const onchn = (e) => {
    setpin(e.target.value);
    setservice(false);
  };

  const chkservice = () => {
    let pinjson = pinj;

    if (pinss != undefined && pinss.length == 6) {
      if (Object.keys(pinjson).includes(pinss)) {
        setservice(true);
        toast.success("Yay! Pincode is Serviceable", {
          position: "bottom-center",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      } else {
        setservice(false);
        toast.error("Sorry! Pincode is not Serviceable", {
          position: "bottom-center",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
          theme: "light",
        });
      }
      setpin("");
    } else {
      setservice(false);
      toast.error("Enter Corrent Pincode !", {
        position: "bottom-center",
        autoClose: 1000,
        hideProgressBar: false,
        closeOnClick: true,
        pauseOnHover: true,
        draggable: true,
        progress: undefined,
        theme: "light",
      });
      setpin("");
    }
  };

  return (
    <div>
      <Head>
        <title>{m}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="png" href="/logo.png" />
      </Head>
      <ToastContainer
        position="bottom-center"
        autoClose={1000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <section className="text-gray-600 body-font overflow-hidden">
        <div className="container px-5 py-10 mx-auto">
          <div className="lg:w-4/5 mx-auto flex flex-wrap">
            <img
              alt="ecommerce"
              className="lg:w-1/2 w-full shadow-xl  lg:h-auto p-4 md:p-10  object-center md:rounded-md rounded-lg"
              src={prod.img}
            />
            <div className="lg:w-1/2 w-full lg:pl-10 p-4 lg:py-6 mt-6 lg:mt-0">
              <h2 className="text-sm title-font text-gray-500 tracking-widest">
                LOKOCART
              </h2>
              <h1 className="text-gray-900 text-3xl title-font font-medium mb-1">
                {prod.title} ({prod.size}/{prod.color})
              </h1>
              <div className="flex mb-4">
                <span className="flex items-center">
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    className="w-4 h-4 text-pink-500"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    className="w-4 h-4 text-pink-500"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    className="w-4 h-4 text-pink-500"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  <svg
                    fill="currentColor"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    className="w-4 h-4 text-pink-500"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  <svg
                    fill="none"
                    stroke="currentColor"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    className="w-4 h-4 text-pink-500"
                    viewBox="0 0 24 24"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  <span className="text-gray-600 ml-3">4 Reviews</span>
                </span>
                <span className="flex ml-3 pl-3 py-2 border-l-2 border-gray-200 space-x-2s">
                  <a className="text-gray-500">
                    <svg
                      fill="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      className="w-5 h-5"
                      viewBox="0 0 24 24"
                    >
                      <path d="M18 2h-3a5 5 0 00-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 011-1h3z" />
                    </svg>
                  </a>
                  <a className="text-gray-500">
                    <svg
                      fill="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      className="w-5 h-5"
                      viewBox="0 0 24 24"
                    >
                      <path d="M23 3a10.9 10.9 0 01-3.14 1.53 4.48 4.48 0 00-7.86 3v1A10.66 10.66 0 013 4s-4 9 5 13a11.64 11.64 0 01-7 2c9 5 20 0 20-11.5a4.5 4.5 0 00-.08-.83A7.72 7.72 0 0023 3z" />
                    </svg>
                  </a>
                  <a className="text-gray-500">
                    <svg
                      fill="currentColor"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      className="w-5 h-5"
                      viewBox="0 0 24 24"
                    >
                      <path d="M21 11.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7 8.38 8.38 0 01-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 01-.9-3.8 8.5 8.5 0 014.7-7.6 8.38 8.38 0 013.8-.9h.5a8.48 8.48 0 018 8v.5z" />
                    </svg>
                  </a>
                </span>
              </div>
              <p className="leading-relaxed">{prod.descp}</p>
              <div className="flex mt-6 items-center pb-5 border-b-2 border-gray-100 mb-5">
                <div className="flex">
                  <span className="mr-3">Color</span>

                  {Object.keys(variants).includes("white") &&
                    Object.keys(variants["white"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("white", size);
                        }}
                        className={`border-2 ${
                          color === "white" ? "border-black" : "border-gray-300"
                        } rounded-full w-6 h-6 focus:outline-none  cursor-pointer`}
                      />
                    )}
                  {Object.keys(variants).includes("black") &&
                    Object.keys(variants["black"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("black", size);
                        }}
                        className={`border-2 ${
                          color === "black" ? "border-black" : "border-gray-300"
                        } ml-1 bg-gray-700 rounded-full w-6 h-6 focus:outline-none cursor-pointer`}
                      />
                    )}
                  {Object.keys(variants).includes("red") &&
                    Object.keys(variants["red"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("red", size);
                        }}
                        className={`border-2 ${
                          color === "red" ? "border-black" : "border-gray-300"
                        } ml-1 bg-red-700 rounded-full w-6 h-6 focus:outline-none cursor-pointer`}
                      />
                    )}
                  {Object.keys(variants).includes("green") &&
                    Object.keys(variants["green"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("green", size);
                        }}
                        className={`border-2 ${
                          color === "green" ? "border-black" : "border-gray-300"
                        } ml-1 bg-green-700 rounded-full w-6 h-6 focus:outline-none cursor-pointer`}
                      />
                    )}
                  {Object.keys(variants).includes("blue") &&
                    Object.keys(variants["blue"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("blue", size);
                        }}
                        className={`border-2 ${
                          color === "blue" ? "border-black" : "border-gray-300"
                        } ml-1 bg-blue-500 rounded-full w-6 h-6 focus:outline-none cursor-pointer`}
                      />
                    )}
                  {Object.keys(variants).includes("yellow") &&
                    Object.keys(variants["yellow"]).includes(size) && (
                      <button
                        onClick={() => {
                          refreshvariant("yellow", size);
                        }}
                        className={`border-2 ${
                          color === "yellow"
                            ? "border-black"
                            : "border-gray-300"
                        } ml-1 bg-yellow-500 rounded-full w-6 h-6 focus:outline-none cursor-pointer`}
                      />
                    )}
                </div>
                <div className="flex ml-6 items-center">
                  <span className="mr-3">Size</span>
                  <div className="relative">
                    <select
                      value={size}
                      onChange={(e) => {
                        refreshvariant(color, e.target.value);
                      }}
                      className="rounded border appearance-none border-gray-300 py-2 cursor-pointer focus:outline-none focus:ring-2 focus:ring-pink-200 focus:border-pink-500 text-base pl-3 pr-10"
                    >
                      {Object.keys(variants[color]).includes("free") && (
                        <option className="uppercase">free</option>
                      )}
                      {Object.keys(variants[color]).includes("s") && (
                        <option className="uppercase">s</option>
                      )}
                      {Object.keys(variants[color]).includes("m") && (
                        <option className="uppercase">m</option>
                      )}
                      {Object.keys(variants[color]).includes("l") && (
                        <option className="uppercase">l</option>
                      )}
                      {Object.keys(variants[color]).includes("xl") && (
                        <option className="uppercase">xl</option>
                      )}
                      {Object.keys(variants[color]).includes("xxl") && (
                        <option className="uppercase">xxl</option>
                      )}
                    </select>
                    <span className="absolute right-0 top-0 h-full w-10 text-center text-gray-600 pointer-events-none flex items-center justify-center">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        className="w-4 h-4"
                        viewBox="0 0 24 24"
                      >
                        <path d="M6 9l6 6 6-6" />
                      </svg>
                    </span>
                  </div>
                </div>
              </div>

              <div className="md:flex items-center md:space-x-4">
                <span className="title-font font-medium text-2xl text-red-400">
                  ₹{prod.price}
                </span>
                <button
                  onClick={() => {
                    toast.success(`redirecting to checkout`, {
                      position: "bottom-center",
                      autoClose: 1000,
                      hideProgressBar: false,
                      closeOnClick: true,
                      pauseOnHover: true,
                      draggable: true,
                      progress: undefined,
                      theme: "light",
                    });
                    buynow(
                      slug,
                      1,
                      prod.price,
                      prod.title,
                      prod.size,
                      prod.color
                    );
                  }}
                  className="flex  my-2 text-white hover:text-gray-700 bg-pink-500 border-0 py-2 lg:px-[0.7rem] px-1 focus:outline-none hover:bg-pink-600 rounded"
                >
                  <BsFillCartPlusFill className="m-1" />
                  Buy now
                </button>
                <button
                  onClick={() => {
                    toast.success("Yay! Item added succesfully", {
                      position: "bottom-center",
                      autoClose: 1000,
                      hideProgressBar: false,
                      closeOnClick: true,
                      pauseOnHover: true,
                      draggable: true,
                      progress: undefined,
                      theme: "light",
                    });
                    addtocart(
                      slug,
                      1,
                      prod.price,
                      prod.title,
                      prod.size,
                      prod.color,
                      true
                    );
                  }}
                  className="flex my-2 text-white hover:text-gray-700 bg-pink-500 border-0 py-2 lg:px-[0.7rem] px-1 focus:outline-none hover:bg-pink-600 rounded"
                >
                  <BsFillCartPlusFill className="m-1" />
                  Add to cart
                </button>
              </div>
              <div>
                <h5 className="text-red-600  text-sm mt-2 mb-0">
                  enter pin to check service availability
                  <br />{" "}
                </h5>
              </div>
              <div className="flex mt-2">
                <input
                  value={pinss}
                  placeholder="enter pin to check"
                  type="number"
                  onChange={onchn}
                  className="w-36 border-2 caret-pink-700 carr border-slate-600  focus:border-pink-500 focus:ring-2 focus:ring-pink-200 text-base outline-none text-gray-700 py-1 lg:px-3 leading-8 transition-colors duration-200 ease-in-out rounded-md p-2"
                />
                <button
                  disabled={!pinss}
                  onClick={chkservice}
                  className="flex items-center ml-8 disabled:bg-pink-300 text-white hover:text-gray-700 bg-pink-500 border-0  focus:outline-none hover:bg-pink-600 rounded p-1"
                >
                  <BsFillCheckCircleFill className="m-1 hover:text-green-500" />
                  Check
                </button>
              </div>
              {!service && service != null && (
                <div className="text-red-500 text-md font-bold">
                  Not Avalable
                </div>
              )}
              {service && service != null && (
                <div className="text-green-400 text-md font-bold">
                  Available
                </div>
              )}
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};
export async function getServerSideProps(context) {
  if (!mongoose.connections[0].readyState) {
    await mongoose.connect(process.env.MONGODB_URI,{useNewUrlParser: true, useUnifiedTopology: true});
  }
  let prod = await product.findOne({ slug: context.query.slug });
  let pins = await pin.find();
  let pinj = {};
  for (let i of pins) {
    pinj[i.zip] = JSON.parse(JSON.stringify(pins));
  }
  let variants = await product.find({ title: prod.title });
  let colorSizeSlug = {};
  for (let i of variants) {
    if (Object.keys(colorSizeSlug).includes(i.color)) {
      colorSizeSlug[i.color][i.size] = { slug: i.slug };
    } else {
      colorSizeSlug[i.color] = {};
      colorSizeSlug[i.color][i.size] = { slug: i.slug };
    }
  }
  let pincity = {};
  for (let i of pins) {
    if (Object.keys(pincity).includes(i.pincode)) {
      pincity[i.pincode] = { state: i.state, city: i.city };
      //   pincity[i.pincode]= { city: i.city };
    } else {
      pincity[i.pincode] = {};
      pincity[i.pincode] = { state: i.state, city: i.city };
    }
  }
  return {
    props: {
      prod: JSON.parse(JSON.stringify(prod)),
      variants: JSON.parse(JSON.stringify(colorSizeSlug)),
      pinj: JSON.parse(JSON.stringify(pincity)),
    },
  };
}

export default post;
