import React, { useEffect, useState } from "react";
import mongoose from "mongoose";
import Order from "../../models/Order";
import { useRouter } from "next/router";
import Head from "next/head";

const MyOrder = ({ order,clearcart }) => {
  const [date, setdate] = useState();
  const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
  const router = useRouter();
  useEffect(()=>{
    const d = new Date(order.createdAt);
    setdate(d);
    if(router.query.cc==1){
      clearcart();
    }
  },[])
  const products = order.products;
  return (
    <div>
         <Head>
        <title>LOCOCART - Order-{router.query.id}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type='png' href="/logo.png" />
      </Head>
      <section className="text-gray-600 body-font overflow-hidden">
        <div className="container px-5 py-24 mx-auto">
          <div className="lg:w-4/5 mx-auto flex flex-wrap">
            <div className="lg:w-1/2 w-full lg:pr-10 lg:py-6 mb-6 lg:mb-0">
              <h2 className="text-sm title-font text-gray-500 tracking-widest">
                LOCO CART
              </h2>
              <h1 className="font-bold text-xl md:text-3xl">order id : {order._id}</h1>
              <p className="leading-relaxed">Order Successfully Placed</p>
              <p className="leading-relaxed">Order placed On : {date && date.toLocaleString("en-IN",options)} {date && ("0" + date.getHours()).slice(-2) + ":" + ("0" + date.getMinutes()).slice(-2)}</p>
              <p
                className={`leading-relaxed mb-4 ${
                  order.status === "paid" ? "text-green-400" : "text-red-400"
                } `}
              >
                Your Payment Status is : {order.status}
              </p>
              <div className="flex mb-4">
                <a className="flex-grow text-pink-500 border-b-2 border-pink-500 py-2 text-lg px-1">
                  Description
                </a>
                <a className="flex-grow text-center border-b-2 border-gray-300 py-2 text-lg px-1">
                  Quantity
                </a>
                <a className="flex-grow text-center border-b-2 border-gray-300 py-2 text-lg px-1">
                  Price
                </a>
              </div>
              {Object.keys(products).map((key) => (
                <div key={key} className="flex border-t border-gray-200 py-2">
                  <span className="text-gray-500 w-48">
                    {products[key].name1}
                  </span>
                  <span className=" m-auto text-center  text-gray-500">
                    {products[key].qty}
                  </span>
                  <span className=" text-center m-auto  text-gray-900">
                    ₹{products[key].price}
                  </span>
                </div>
              ))}

              <div className="flex">
                {/* <span className="title-font font-medium text-2xl text-gray-900">
                  499
                </span> */}
              </div>
              <div>
                <h1 className="font-bold text-3xl">
                  Subtotal : ₹{order.amount}
                </h1>{" "}
              </div>
              <div>
                <button className="flex mt-2 text-white bg-pink-500 border-0 py-3 px-4 focus:outline-none hover:bg-pink-600 rounded">
                  Track Order
                </button>
              </div>
            </div>
            <img
              alt="ecommerce"
              className="lg:w-1/2 w-full lg:h-auto h-64 object-cover object-center rounded"
              src="https://cdn.shopify.com/s/files/1/0902/8114/products/Camp_Cup_12oz_Thousand_Hills_Studio_0420_402651_1_e9f979dd-0ed8-45a6-8202-2d0fb508390c_1600x.jpg?v=1628763519"
            />
          </div>
        </div>
      </section>
    </div>
  );
};
export async function getServerSideProps(context) {
  if (!mongoose.connections[0].readyState) {
    await mongoose.connect(process.env.MONGO_URI,{useNewUrlParser: true, useUnifiedTopology: true});
  }
  let order = await Order.findById(context.query.id);

  return {
    props: {
      order: JSON.parse(JSON.stringify(order)),
    },
  };
}

export default MyOrder;
